---
title: "Traitement de données et visualisation"
author: "Randriamanalina Bevalamanana Solo Thierry"
format: 
  revealjs:
    logo: img/logo.jpg 
    slide-number: c
    incremental: false
    theme: style.scss
    transition: fade
    height: 900
    width: 1600
    fontcolor: "#262d36"
    highlight-style: a11y
    code-line-numbers: false
---

# Introduction au Traitement de données

## Tableau tidy ?

```{r}
library(tidyverse)

#|echo: true


# Using tidyverse




```

## Transformer des données {.scrollable}


# Introduction à l'extension `data.table`


## utilisation de `data.table`

```{r}
## utilisation de `data.table`


```




# Introduction à l'extension `collapse`


## utilisation de `collapse`

```{r}
#|echo: true


# Installer et charger l'extension




```


# Formatter

## Formatter les dates avec `bigD` {.scrollable}

```{r}
#| echo: true

# Installer et charger l'extension "bigD"
library(tidyverse)
library(lubridate)
library(glue)
library(bigD)

# Utilisation de lubridate 
d <- c("25/10/1985", "09/03/1988", "01092015", "01032018")
noms <- c("Thierry", "Vololona", "Logan", "Alexandra")
sexe <- factor(c("M", "F", "M", "F"), c("M","F"))
d_format <- dmy(d) %>%
  fdt(format = "EEEE, dd MMMM yyyy",
  locale = "fr")

# Voici le vecteur sans mise en forme
d

# Voici le vecteur mis en forme
d_format

```

## Utiliser `glue()` {.scrollable}

```{r}
#| echo: true

# Créer une fonction avec glue()
famille <- function(nom, date_naissance){
  glue("{nom} est né(e) le {date_naissance}.")
}

famille(noms, d_format)

# using glue_data() and glue() inside mutate()
tab_famille <- tibble(nom = noms, date_naissance = dmy(d) %>% fdt(format = "EEEE",
  locale = "fr")) %>% 
   mutate(designation_sexe = if_else(sexe == "M", "né", "née"))

# Utiliser les colonnes dans un tableau et obtenir un vecteur en sortie avec glu_data()
tab_famille %>% 
  glue_data("{nom} est {designation_sexe} un {date_naissance}") 

# Garder le résultat dans une colonne
tab_famille1 <- tab_famille %>% 
  mutate(ensemble = glue("{nom} est né(e) un {date_naissance}"))

tab_famille1 %>% select(nom, ensemble)

```


# Visualisation de données

## Visualisation avec `ggplot2` {.scrollable}

```{r}
#|echo: true
library(palmerpenguins)

# Le jeu de données "penguins" comprend :
str(penguins)

# Simple visualisation
theme_set(theme_light())

penguins %>%
  ggplot(aes(x = bill_length_mm, fill = species)) +
  geom_histogram(
    bins = 30,
    color = "white",
    alpha = 0.9
  )

# Density
penguins %>%
  ggplot(aes(x = bill_length_mm, fill = species)) +
  geom_density()


# Approximation par rapport à la distribution normale

penguins %>%
  ggplot(aes(sample = bill_length_mm)) +
  stat_qq_line(color = "#00026b") + 
  geom_qq(color = "gray20")

# hslcolorpicker

```

## Cartographie dans R

```{r}


```

## Ressources

-   [**"Geocomputation with R"**](https://geocompr.robinlovelace.net/)\
    --- Garrett Grolemund & Hadley Wickham

-   [**"Advanced R"**](https://adv-r.hadley.nz/)\
    --- Hadley Wickham


# Modélisation dans R

## Régression linéaire


